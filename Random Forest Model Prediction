# Since it takes more than an hour to fit RF model, I'll check if it already exists.
# Start the clock!
# ptm <- proc.time()
# fit Random Forest(RF) model
# fitRf <- train(classe~.,data=train, method="rf",allowParallel=TRUE,trcontorl=cv10)
# Stop the clock
# (proc.time() - ptm)/60
# Time spent(in minutes) to fit the model : 73 minutes
# usuÃ¡rio    sistema  decorrido 
# 62.1833333  0.2756667 73.0075000 
# load saved fitted model from disk
fitRf <- readRDS("./fitRf_model.rds")
# predicting the outcome variable(classe) on training dataset
predRf <- predict(fitRf,train)
table(predRf,train$classe)
##       
## predRf    A    B    C    D    E
##      A 5580    0    0    0    0
##      B    0 3797    0    0    0
##      C    0    0 3422    0    0
##      D    0    0    0 3216    0
##      E    0    0    0    0 3607
confusionMatrix(predRf,train$classe)
## Confusion Matrix and Statistics
## 
##           Reference
## Prediction    A    B    C    D    E
##          A 5580    0    0    0    0
##          B    0 3797    0    0    0
##          C    0    0 3422    0    0
##          D    0    0    0 3216    0
##          E    0    0    0    0 3607
## 
## Overall Statistics
##                                      
##                Accuracy : 1          
##                  95% CI : (0.9998, 1)
##     No Information Rate : 0.2844     
##     P-Value [Acc > NIR] : < 2.2e-16  
##                                      
##                   Kappa : 1          
##  Mcnemar's Test P-Value : NA         
## 
## Statistics by Class:
## 
##                      Class: A Class: B Class: C Class: D Class: E
## Sensitivity            1.0000   1.0000   1.0000   1.0000   1.0000
## Specificity            1.0000   1.0000   1.0000   1.0000   1.0000
## Pos Pred Value         1.0000   1.0000   1.0000   1.0000   1.0000
## Neg Pred Value         1.0000   1.0000   1.0000   1.0000   1.0000
## Prevalence             0.2844   0.1935   0.1744   0.1639   0.1838
## Detection Rate         0.2844   0.1935   0.1744   0.1639   0.1838
## Detection Prevalence   0.2844   0.1935   0.1744   0.1639   0.1838
## Balanced Accuracy      1.0000   1.0000   1.0000   1.0000   1.0000
